{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#template-de-entrega","title":"Template de Entrega","text":"Edi\u00e7\u00e3o <p>2025.1</p>"},{"location":"#grupokit-x","title":"Grupo/Kit X","text":"<ol> <li>Isabela Vieira</li> <li>Deena</li> <li>Lagoa</li> </ol> <p>Instru\u00e7\u00f5es</p> <p>Voc\u00eas devem utilizar este template como um bloco de notas para registrar o que foi feito e o que falta fazer. Voc\u00eas devem adicionar as informa\u00e7\u00f5es necess\u00e1rias. O template deve ser editado e atualizado a cada entrega, registrando assim a data de entrega e o que foi feito at\u00e9 o momento via Git.</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - Data 24/10/2025</li> <li> Roteiro 2 - Data 24/10/2025</li> <li> Roteiro 3 - Data 24/10/2025</li> <li> Roteiro 4 - Data 24/10/2025</li> <li> Projeto - </li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"exchangeapi/main/","title":"Exchange API","text":""},{"location":"exchangeapi/main/#exchange-api","title":"Exchange API","text":"<p>A Exchange API \u00e9 um microsservi\u00e7o desenvolvido em Python com FastAPI que permite converter valores entre diferentes moedas, utilizando taxas de c\u00e2mbio </p>"},{"location":"exchangeapi/main/#visao-geral","title":"Vis\u00e3o Geral","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e1@==&gt; exchange:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc\n    classDef green fill:#cfc\n    click product \"#product-api\" \"Product API\"</code></pre> <p>API Externa de C\u00e2mbio</p> <p>O servi\u00e7o Exchange utiliza a Exchange Rate API para obter taxas de c\u00e2mbio em tempo real:</p> <ul> <li>URL: <code>https://api.exchangerate-api.com/v4/latest/{moeda}</code></li> <li>Exemplo: <code>https://api.exchangerate-api.com/v4/latest/USD</code></li> </ul> <p>O servi\u00e7o aplica um spread de 2% sobre as taxas obtidas para calcular os valores de compra e venda</p>"},{"location":"exchangeapi/main/#endpoints","title":"Endpoints","text":"<p>GET /exchange/{from}/{to}</p> <p>Obt\u00e9m a taxa de c\u00e2mbio entre duas moedas.</p> RequestResponse <pre><code>GET /exchange/USD/EUR\nAuthorization: Bearer &lt;jwt&gt;\n</code></pre> <p></p><pre><code>{\n    \"sell\": 0.82,\n    \"buy\": 0.80,\n    \"date\": \"2021-09-01 14:23:42\",\n    \"id_account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 400 (bad request), se a moeda n\u00e3o existir\nResponse code: 401 (unauthorized), se o token for inv\u00e1lido\nResponse code: 503 (service unavailable), se a API externa falhar\n</code></pre><p></p> <p>GET /status</p> <p>Verifica o status do servi\u00e7o.</p> Response <p></p><pre><code>{\n    \"status\": \"ok\",\n    \"service\": \"exchange\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p>"},{"location":"exchangeapi/main/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"exchangeapi/main/#exchange-api-python-fastapi","title":"Exchange API (Python + FastAPI)","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 exchange/\n    \u251c\u2500\u2500 \ud83d\udcc4 main.py\n    \u251c\u2500\u2500 \ud83d\udcc4 requirements.txt\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 .gitignore\n</code></pre> C\u00f3digo Fonte main.pyrequirements.txtDockerfile <pre><code>from fastapi import FastAPI, HTTPException, Depends, Header\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom pydantic import BaseModel\nfrom typing import Optional\nimport requests\nimport os\nfrom datetime import datetime\nimport uuid\n\napp = FastAPI(title=\"Exchange API\")\nsecurity = HTTPBearer()\n\n# Configura\u00e7\u00f5es\nEXCHANGE_API_KEY = os.getenv(\"EXCHANGE_API_KEY\")\nEXCHANGE_API_URL = os.getenv(\"EXCHANGE_API_URL\", \"https://api.exchangerate-api.com/v4/latest\")\n\nclass ExchangeResponse(BaseModel):\n    sell: float\n    buy: float\n    date: str\n    id_account: str\n\nclass ExchangeService:\n    def __init__(self):\n        self.api_key = EXCHANGE_API_KEY\n        self.api_url = EXCHANGE_API_URL\n\n    def get_exchange_rate(self, from_currency: str, to_currency: str) -&gt; dict:\n        try:\n            url = f\"{self.api_url}/{from_currency.upper()}\"\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n\n            data = response.json()\n            rate = data.get(\"rates\", {}).get(to_currency.upper())\n\n            if not rate:\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Currency {to_currency} not found\"\n                )\n\n            spread = 0.02\n            buy_rate = rate * (1 - spread/2)\n            sell_rate = rate * (1 + spread/2)\n\n            return {\n                \"buy\": round(buy_rate, 4),\n                \"sell\": round(sell_rate, 4),\n                \"rate\": rate\n            }\n\n        except requests.exceptions.RequestException as e:\n            raise HTTPException(\n                status_code=503,\n                detail=f\"External API error: {str(e)}\"\n            )\n\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    token = credentials.credentials\n\n    if not token or len(token) &lt; 10:\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid or missing token\"\n        )\n\n    return token\n\ndef get_account_id_from_token(token: str) -&gt; str:\n    return str(uuid.uuid5(uuid.NAMESPACE_DNS, token))\n\nexchange_service = ExchangeService()\n\n@app.get(\"/exchange/{from_currency}/{to_currency}\", response_model=ExchangeResponse)\nasync def get_exchange_rate(\n    from_currency: str,\n    to_currency: str,\n    token: str = Depends(verify_token)\n):\n    if len(from_currency) != 3 or len(to_currency) != 3:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Currency codes must be 3 characters long\"\n        )\n\n    if from_currency.upper() == to_currency.upper():\n        raise HTTPException(\n            status_code=400,\n            detail=\"Source and target currencies cannot be the same\"\n        )\n\n    rate_data = exchange_service.get_exchange_rate(from_currency, to_currency)\n    account_id = get_account_id_from_token(token)\n\n    return ExchangeResponse(\n        sell=rate_data[\"sell\"],\n        buy=rate_data[\"buy\"],\n        date=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n        id_account=account_id\n    )\n\n@app.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\", \"service\": \"exchange\"}\n</code></pre> <pre><code>fastapi==0.104.1\nuvicorn==0.24.0\nrequests==2.31.0\npython-jose[cryptography]==3.3.0\npython-multipart==0.0.6\npydantic==2.5.0\npython-dotenv==1.0.0\n</code></pre> <pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Instalar depend\u00eancias do sistema\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copiar requirements e instalar depend\u00eancias Python\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copiar c\u00f3digo da aplica\u00e7\u00e3o\nCOPY . .\n\n# Expor porta\nEXPOSE 8000\n\n# Comando para executar a aplica\u00e7\u00e3o\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> pip install -r requirements.txtuvicorn main:app --reload"},{"location":"exchangeapi/main/#repositorios","title":"Reposit\u00f3rios","text":"Componente Reposit\u00f3rio Exchange exchange Product product / product-service Order order / order-service Auth auth / auth-service Gateway gateway-service"},{"location":"jenkins/limit.def/","title":"Limit.def","text":"In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\n</pre> import matplotlib.pyplot as plt import numpy as np from io import StringIO In\u00a0[\u00a0]: Copied! <pre>eq = lambda x: np.exp(x)\n</pre> eq = lambda x: np.exp(x) In\u00a0[\u00a0]: Copied! <pre>x = np.linspace(-.2, 2.1)\n</pre> x = np.linspace(-.2, 2.1) In\u00a0[\u00a0]: Copied! <pre>plt.rcParams[\"figure.figsize\"] = (15, 5)\n</pre> plt.rcParams[\"figure.figsize\"] = (15, 5) In\u00a0[\u00a0]: Copied! <pre>xa = 1.5\nya = 7\nk = 0.3\nka = xa - k\nak = xa + k\n</pre> xa = 1.5 ya = 7 k = 0.3 ka = xa - k ak = xa + k In\u00a0[\u00a0]: Copied! <pre>fig, ax = plt.subplots(1, 3)\nfor i in range(3):\n  ax[i].axhline(0, color='gray') # x = 0\n  ax[i].axvline(0, color='gray') # y = 0\n  ax[i].spines['top'].set_visible(False)\n  ax[i].spines['right'].set_visible(False)\n  ax[i].spines['bottom'].set_visible(False)\n  ax[i].spines['left'].set_visible(False)\n  ax[i].plot(x, eq(x), '-r', lw=4)\n  ax[i].set_xlim(min(x), max(x))\n  ax[i].set_xticks([])\n  ax[i].set_yticks([])\n  ax[i].plot([ka, ka], [0, eq(ka)], 'g:')\n  ax[i].plot([0, ka], [eq(ka), eq(ka)], 'g:')\n  ax[i].plot([ak, ak], [0, eq(ak)], 'g:')\n  ax[i].plot([0, ak], [eq(ak), eq(ak)], 'g:')\n  ax[i].text(xa, -0.5, 'a', horizontalalignment='center', fontsize=15)\n  ax[i].text(ka, -0.5, '$a-\\delta$', horizontalalignment='center', fontsize=15)\n  ax[i].text(ak, -0.5, '$a+\\delta$', horizontalalignment='center', fontsize=15)\n  ax[i].text(0, eq(ka), '$L-\\epsilon$', horizontalalignment='right', verticalalignment='center', fontsize=15)\n  ax[i].text(0, eq(ak), '$L+\\epsilon$', horizontalalignment='right', verticalalignment='center', fontsize=15)\n</pre> fig, ax = plt.subplots(1, 3) for i in range(3):   ax[i].axhline(0, color='gray') # x = 0   ax[i].axvline(0, color='gray') # y = 0   ax[i].spines['top'].set_visible(False)   ax[i].spines['right'].set_visible(False)   ax[i].spines['bottom'].set_visible(False)   ax[i].spines['left'].set_visible(False)   ax[i].plot(x, eq(x), '-r', lw=4)   ax[i].set_xlim(min(x), max(x))   ax[i].set_xticks([])   ax[i].set_yticks([])   ax[i].plot([ka, ka], [0, eq(ka)], 'g:')   ax[i].plot([0, ka], [eq(ka), eq(ka)], 'g:')   ax[i].plot([ak, ak], [0, eq(ak)], 'g:')   ax[i].plot([0, ak], [eq(ak), eq(ak)], 'g:')   ax[i].text(xa, -0.5, 'a', horizontalalignment='center', fontsize=15)   ax[i].text(ka, -0.5, '$a-\\delta$', horizontalalignment='center', fontsize=15)   ax[i].text(ak, -0.5, '$a+\\delta$', horizontalalignment='center', fontsize=15)   ax[i].text(0, eq(ka), '$L-\\epsilon$', horizontalalignment='right', verticalalignment='center', fontsize=15)   ax[i].text(0, eq(ak), '$L+\\epsilon$', horizontalalignment='right', verticalalignment='center', fontsize=15) In\u00a0[\u00a0]: Copied! <pre>ax[0].plot([xa, xa], [0, eq(xa)], 'b:')\nax[0].plot([0, xa], [eq(xa), eq(xa)], 'b:')\nax[0].plot(xa, eq(xa), 'ro', ms=15)\nax[0].text(0, eq(xa), 'L=f(a)', horizontalalignment='right', verticalalignment='center', fontsize=15)\nax[1].plot([xa, xa], [0, eq(xa)], 'b:')\nax[1].plot([0, xa], [eq(xa), eq(xa)], 'm:')\nax[1].plot(xa, eq(xa), marker='o', ms=15, mec='red', color='white')\nax[1].text(0, eq(xa), 'L', horizontalalignment='right', verticalalignment='center', fontsize=15)\nax[2].plot(xa, eq(xa), marker='o', ms=15, mec='white', color='white')\nax[2].plot([xa, xa], [0, ya], 'b:')\nax[2].plot([0, xa], [ya, ya], 'b:')\nax[2].plot([0, xa], [eq(xa), eq(xa)], 'm:')\nax[2].plot(xa, eq(xa), marker='o', ms=15, mec='red', color='white')\nax[2].plot(xa, ya, 'ro', ms=15)\nax[2].text(0, ya, 'f(a)', horizontalalignment='right', verticalalignment='center', fontsize=15)\nax[2].text(0, eq(xa), 'L', horizontalalignment='right', verticalalignment='center', fontsize=15)\n</pre> ax[0].plot([xa, xa], [0, eq(xa)], 'b:') ax[0].plot([0, xa], [eq(xa), eq(xa)], 'b:') ax[0].plot(xa, eq(xa), 'ro', ms=15) ax[0].text(0, eq(xa), 'L=f(a)', horizontalalignment='right', verticalalignment='center', fontsize=15) ax[1].plot([xa, xa], [0, eq(xa)], 'b:') ax[1].plot([0, xa], [eq(xa), eq(xa)], 'm:') ax[1].plot(xa, eq(xa), marker='o', ms=15, mec='red', color='white') ax[1].text(0, eq(xa), 'L', horizontalalignment='right', verticalalignment='center', fontsize=15) ax[2].plot(xa, eq(xa), marker='o', ms=15, mec='white', color='white') ax[2].plot([xa, xa], [0, ya], 'b:') ax[2].plot([0, xa], [ya, ya], 'b:') ax[2].plot([0, xa], [eq(xa), eq(xa)], 'm:') ax[2].plot(xa, eq(xa), marker='o', ms=15, mec='red', color='white') ax[2].plot(xa, ya, 'ro', ms=15) ax[2].text(0, ya, 'f(a)', horizontalalignment='right', verticalalignment='center', fontsize=15) ax[2].text(0, eq(xa), 'L', horizontalalignment='right', verticalalignment='center', fontsize=15) In\u00a0[\u00a0]: Copied! <pre>fig.tight_layout()\n</pre> fig.tight_layout() In\u00a0[\u00a0]: Copied! <pre>buffer = StringIO()\nplt.savefig(buffer, format=\"svg\", transparent=True)\nprint(buffer.getvalue())\n</pre> buffer = StringIO() plt.savefig(buffer, format=\"svg\", transparent=True) print(buffer.getvalue())"},{"location":"jenkins/main/","title":"Jenkins","text":""},{"location":"jenkins/main/#jenkins","title":"Jenkins","text":"<p>Pipeline CI/CD para deploy dos microsservi\u00e7os em um cluster Kubernetes.</p>"},{"location":"jenkins/main/#repositorios","title":"Reposit\u00f3rios","text":"<ul> <li>Account Service</li> <li>Auth Service</li> <li>Gateway Service</li> <li>Product Service</li> <li>Order Service</li> </ul>"},{"location":"jenkins/main/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>\ud83d\udcc1 api/\n\ud83d\udcc4 \u251c\u2500\u2500 account-service/\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Jenkinsfile\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Dockerfile\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 src/...\n\ud83d\udcc4 \u251c\u2500\u2500 auth-service/\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Jenkinsfile\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Dockerfile\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 src/...\n\ud83d\udcc4 \u251c\u2500\u2500 gateway-service/\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Jenkinsfile\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Dockerfile\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 src/...\n\ud83d\udcc4 \u251c\u2500\u2500 product-service/\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Jenkinsfile\n\ud83d\udcc4 \u2502   \u251c\u2500\u2500 Dockerfile\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 src/...\n\ud83d\udcc1 \u2514\u2500\u2500 order-service/\n\u251c\u2500\u2500 \ud83d\udcc4 \u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 \ud83d\udcc4 \u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 \ud83d\udcc4 \u2514\u2500\u2500 src/...\n</code></pre>"},{"location":"jenkins/main/#jenkins-setup","title":"Jenkins Setup","text":"<p>O ambiente Jenkins \u00e9 configurado usando Docker Compose:</p> <pre><code># docker compose up -d --build --force-recreate\nname: ops\n\nservices:\n  jenkins:\n    container_name: jenkins\n    build:\n      dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n\n        # Install tools\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release iputils-ping maven\n\n        # Install Docker\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n          https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n          signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n          https://download.docker.com/linux/debian \\\n          $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce\n\n        # Install kubectl\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update &amp;&amp; apt-get install -y kubectl\n\n        RUN usermod -aG docker jenkins\n    ports:\n      - 9080:8080\n    volumes:\n      - ${CONFIG:-./config}/jenkins:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n</code></pre>"},{"location":"jenkins/main/#jenkinsfile","title":"Jenkinsfile","text":""},{"location":"jenkins/main/#product-service","title":"Product Service","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product'\n        NAME = \"isavrodrigues/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependencies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }\n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/main/#contract-interface","title":"Contract (Interface)","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/main/#pipeline-executando","title":"Pipeline Executando","text":""},{"location":"jenkins/smc/","title":"Smc","text":"In\u00a0[\u00a0]: Copied! <pre>from datetime import datetime\nimport matplotlib.pyplot as plt\nimport yfinance as yf\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n</pre> from datetime import datetime import matplotlib.pyplot as plt import yfinance as yf import numpy as np import pandas as pd from io import StringIO In\u00a0[\u00a0]: Copied! <pre>num_days = 250\nnum_simulations = 200\norder_poly = 1\n</pre> num_days = 250 num_simulations = 200 order_poly = 1 In\u00a0[\u00a0]: Copied! <pre>ticker = '^BVSP'\n</pre> ticker = '^BVSP' In\u00a0[\u00a0]: Copied! <pre>info = yf.Ticker(ticker)\ndata = info.history(period='2y')\n</pre> info = yf.Ticker(ticker) data = info.history(period='2y') In\u00a0[\u00a0]: Copied! <pre>close = data['Close']\ndaily_return = close.pct_change()\n</pre> close = data['Close'] daily_return = close.pct_change() In\u00a0[\u00a0]: Copied! <pre>x = np.linspace(1, len(close), len(close))\nf = np.poly1d(np.polyfit(x, close, order_poly))\nxs = np.linspace(max(x), max(x) + num_days, num_days)\n</pre> x = np.linspace(1, len(close), len(close)) f = np.poly1d(np.polyfit(x, close, order_poly)) xs = np.linspace(max(x), max(x) + num_days, num_days) In\u00a0[\u00a0]: Copied! <pre>sigma = daily_return.std()\nmu = daily_return.mean()\n</pre> sigma = daily_return.std() mu = daily_return.mean() In\u00a0[\u00a0]: Copied! <pre>simulated_prices = np.zeros((num_days, num_simulations))\n</pre> simulated_prices = np.zeros((num_days, num_simulations)) In\u00a0[\u00a0]: Copied! <pre>for i in range(num_simulations):\n    simulated_prices[0][i] = close[-1]\n    for j in range(1, num_days):\n        daily_return = np.random.normal(mu, sigma)\n        simulated_prices[j][i] = simulated_prices[j-1][i] * (1 + daily_return)\n</pre> for i in range(num_simulations):     simulated_prices[0][i] = close[-1]     for j in range(1, num_days):         daily_return = np.random.normal(mu, sigma)         simulated_prices[j][i] = simulated_prices[j-1][i] * (1 + daily_return) In\u00a0[\u00a0]: Copied! <pre>simulated_means = np.mean(simulated_prices, axis=1)\nsimulated_stds = np.std(simulated_prices, axis=1)\n</pre> simulated_means = np.mean(simulated_prices, axis=1) simulated_stds = np.std(simulated_prices, axis=1) In\u00a0[\u00a0]: Copied! <pre>fig, ax = plt.subplots(1, 1, figsize=(12, 8))\nax.plot(\n    x, close,\n    x, f(x), 'r:',\n    xs, simulated_prices,\n    xs, simulated_means,\n    xs, simulated_means + 1*simulated_stds, 'w:',\n    xs, simulated_means - 1*simulated_stds, 'w:',\n    xs, simulated_means + 2*simulated_stds, 'k:',\n    xs, simulated_means - 2*simulated_stds, 'k:',\n    xs, f(xs), 'g',\n)\nax.set_xlim(min(x), max(xs))\n</pre> fig, ax = plt.subplots(1, 1, figsize=(12, 8)) ax.plot(     x, close,     x, f(x), 'r:',     xs, simulated_prices,     xs, simulated_means,     xs, simulated_means + 1*simulated_stds, 'w:',     xs, simulated_means - 1*simulated_stds, 'w:',     xs, simulated_means + 2*simulated_stds, 'k:',     xs, simulated_means - 2*simulated_stds, 'k:',     xs, f(xs), 'g', ) ax.set_xlim(min(x), max(xs)) In\u00a0[\u00a0]: Copied! <pre>buffer = StringIO()\nplt.savefig(buffer, format=\"svg\")\nprint(buffer.getvalue())\n</pre> buffer = StringIO() plt.savefig(buffer, format=\"svg\") print(buffer.getvalue())"},{"location":"k8s/main/","title":"K8s","text":""},{"location":"k8s/main/#kubernetes","title":"Kubernetes","text":"<p>Deploy dos microsservi\u00e7os em um cluster Kubernetes local (Minikube)</p>"},{"location":"k8s/main/#repositorios","title":"Reposit\u00f3rios","text":"<ul> <li>Account Service</li> <li>Auth Service</li> <li>Gateway Service</li> <li>Product Service</li> <li>Order Service</li> </ul>"},{"location":"k8s/main/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>\ud83d\udcc1 api/\n\ud83d\udcc4 \u251c\u2500\u2500 account-service/\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 k8s/\n\ud83d\udcc4 \u2502       \u2514\u2500\u2500 k8s.yaml\n\ud83d\udcc4 \u251c\u2500\u2500 auth-service/\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 k8s/\n\ud83d\udcc4 \u2502       \u2514\u2500\u2500 k8s.yaml\n\ud83d\udcc4 \u251c\u2500\u2500 gateway-service/\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 k8s/\n\ud83d\udcc4 \u2502       \u2514\u2500\u2500 k8s.yaml\n\ud83d\udcc4 \u251c\u2500\u2500 product-service/\n\ud83d\udcc4 \u2502   \u2514\u2500\u2500 k8s/\n\ud83d\udcc4 \u2502       \u2514\u2500\u2500 k8s.yaml\n\ud83d\udcc1 \u2514\u2500\u2500 order-service/\n\u2514\u2500\u2500 \ud83d\udcc1 \u2514\u2500\u2500 k8s/\n    \u2514\u2500\u2500 \ud83d\udcc4 \u2514\u2500\u2500 k8s.yaml\n</code></pre>"},{"location":"k8s/main/#manifests-k8s","title":"Manifests K8s","text":"Account Service <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n        - name: account\n          image: isavrodrigues/account:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\n  labels:\n    app: account\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: account\n</code></pre> Auth Service <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n        - name: auth\n          image: isavrodrigues/auth:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: auth\n</code></pre> Gateway Service <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n        - name: gateway\n          image: isavrodrigues/gateway:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\n  labels:\n    app: gateway\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: gateway\n</code></pre> Product Service <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n        - name: product\n          image: isavrodrigues/product:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: product\n</code></pre> Order Service <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order\n          image: isavrodrigues/order:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: order\n  labels:\n    app: order\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: order\n</code></pre>"},{"location":"k8s/main/#servicos-rodando","title":"Servi\u00e7os Rodando","text":""},{"location":"notebook1/ex1_data/","title":"Notebook 1","text":"In\u00a0[14]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\n\nclass0 = {\n    \"x\": np.random.normal(2, 0.8, size=100),\n    \"y\": np.random.normal(3, 2.5, size=100)\n}\n\nclass1 = {\n    \"x\": np.random.normal(5, 1.2, size=100),\n    \"y\": np.random.normal(6, 1.9, size=100)\n}\n\nclass2 = {\n    \"x\": np.random.normal(8, 0.9, size=100),\n    \"y\": np.random.normal(1, 0.9, size=100)\n}\n\nclass3 = {\n    \"x\": np.random.normal(15, 0.5, size=100),\n    \"y\": np.random.normal(4, 2.0, size=100)\n}\n\n\nplt.figure(figsize=(8,6))\nplt.scatter(class0[\"x\"], class0[\"y\"], label=\"Class 0\", alpha=0.6)\nplt.scatter(class1[\"x\"], class1[\"y\"], label=\"Class 1\", alpha=0.6)\nplt.scatter(class2[\"x\"], class2[\"y\"], label=\"Class 2\", alpha=0.6)\nplt.scatter(class3[\"x\"], class3[\"y\"], label=\"Class 3\", alpha=0.6)\nplt.legend()\nplt.xlabel(\"X1\")\nplt.ylabel(\"X2\")\nplt.title(\"Dados Sinteticos Aleat\u00f3rios\")\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  np.random.seed(42)  class0 = {     \"x\": np.random.normal(2, 0.8, size=100),     \"y\": np.random.normal(3, 2.5, size=100) }  class1 = {     \"x\": np.random.normal(5, 1.2, size=100),     \"y\": np.random.normal(6, 1.9, size=100) }  class2 = {     \"x\": np.random.normal(8, 0.9, size=100),     \"y\": np.random.normal(1, 0.9, size=100) }  class3 = {     \"x\": np.random.normal(15, 0.5, size=100),     \"y\": np.random.normal(4, 2.0, size=100) }   plt.figure(figsize=(8,6)) plt.scatter(class0[\"x\"], class0[\"y\"], label=\"Class 0\", alpha=0.6) plt.scatter(class1[\"x\"], class1[\"y\"], label=\"Class 1\", alpha=0.6) plt.scatter(class2[\"x\"], class2[\"y\"], label=\"Class 2\", alpha=0.6) plt.scatter(class3[\"x\"], class3[\"y\"], label=\"Class 3\", alpha=0.6) plt.legend() plt.xlabel(\"X1\") plt.ylabel(\"X2\") plt.title(\"Dados Sinteticos Aleat\u00f3rios\") plt.show()  <ol> <li><p>Plot the Data: Create a 2D scatter plot showing all the data points. Use a different color for each class to make them distinguishable.</p> </li> <li><p>Analyze and Draw Boundaries:</p> <ol> <li>Examine the scatter plot carefully. Describe the distribution and overlap of the four classes.<ul> <li>Class 0 and 1 have the most overlap, being pretty ditinguishable from the other two classes (numbers 2 and 3). The most segregated one is class 3, being at the far end of the X1 axis of the plot.</li> </ul> </li> <li>Based on your visual inspection, could a simple, linear boundary separate all classes?<ul> <li>I would argue that a line can be made to separate classes from each other, but the line would also put different classes on the same side. This would mean we would need at minimum a second line to properly separate all classes.</li> </ul> </li> <li>On your plot, sketch the decision boundaries that you think a trained neural network might learn to separate these classes.</li> </ol> <p> </p> </li> </ol> In\u00a0[15]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\nnp.random.seed(42)\n\nmu_A = [0, 0, 0, 0, 0]\nSigma_A = np.array([\n    [1.0, 0.8, 0.1, 0.0, 0.0],\n    [0.8, 1.0, 0.3, 0.0, 0.0],\n    [0.1, 0.3, 1.0, 0.5, 0.0],\n    [0.0, 0.0, 0.5, 1.0, 0.2],\n    [0.0, 0.0, 0.0, 0.2, 1.0]\n])\n\nmu_B = [1.5, 1.5, 1.5, 1.5, 1.5]\nSigma_B = np.array([\n    [1.5, -0.7, 0.2, 0.0, 0.0],\n    [-0.7, 1.5, 0.4, 0.0, 0.0],\n    [0.2, 0.4, 1.5, 0.6, 0.0],\n    [0.0, 0.0, 0.6, 1.5, 0.3],\n    [0.0, 0.0, 0.0, 0.3, 1.5]\n])\n\nclass_A = np.random.multivariate_normal(mu_A, Sigma_A, size=500)\nclass_B = np.random.multivariate_normal(mu_B, Sigma_B, size=500)\n\nX = np.vstack((class_A, class_B))\ny = np.array([0]*500 + [1]*500)\n\nprint(\"Dataset shape:\", X.shape)\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)\n\nplt.figure(figsize=(8,6))\nplt.scatter(X_pca[y==0, 0], X_pca[y==0, 1], alpha=0.6, label=\"Class A\")\nplt.scatter(X_pca[y==1, 0], X_pca[y==1, 1], alpha=0.6, label=\"Class B\")\nplt.title(\"PCA de dados Sint\u00e9ticos 5D - Redu\u00e7\u00e3o para 2D\")\nplt.xlabel(\"PC1\")\nplt.ylabel(\"PC2\")\nplt.legend()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA  np.random.seed(42)  mu_A = [0, 0, 0, 0, 0] Sigma_A = np.array([     [1.0, 0.8, 0.1, 0.0, 0.0],     [0.8, 1.0, 0.3, 0.0, 0.0],     [0.1, 0.3, 1.0, 0.5, 0.0],     [0.0, 0.0, 0.5, 1.0, 0.2],     [0.0, 0.0, 0.0, 0.2, 1.0] ])  mu_B = [1.5, 1.5, 1.5, 1.5, 1.5] Sigma_B = np.array([     [1.5, -0.7, 0.2, 0.0, 0.0],     [-0.7, 1.5, 0.4, 0.0, 0.0],     [0.2, 0.4, 1.5, 0.6, 0.0],     [0.0, 0.0, 0.6, 1.5, 0.3],     [0.0, 0.0, 0.0, 0.3, 1.5] ])  class_A = np.random.multivariate_normal(mu_A, Sigma_A, size=500) class_B = np.random.multivariate_normal(mu_B, Sigma_B, size=500)  X = np.vstack((class_A, class_B)) y = np.array([0]*500 + [1]*500)  print(\"Dataset shape:\", X.shape)  pca = PCA(n_components=2) X_pca = pca.fit_transform(X)  plt.figure(figsize=(8,6)) plt.scatter(X_pca[y==0, 0], X_pca[y==0, 1], alpha=0.6, label=\"Class A\") plt.scatter(X_pca[y==1, 0], X_pca[y==1, 1], alpha=0.6, label=\"Class B\") plt.title(\"PCA de dados Sint\u00e9ticos 5D - Redu\u00e7\u00e3o para 2D\") plt.xlabel(\"PC1\") plt.ylabel(\"PC2\") plt.legend() plt.show()  <pre>Dataset shape: (1000, 5)\n</pre> <ol> <li>Visualize the Data: Since you cannot directly plot a 5D graph, you must reduce its dimensionality.<ul> <li>Use a technique like Principal Component Analysis (PCA) to project the 5D data down to 2 dimensions.</li> <li>Create a scatter plot of this 2D representation, coloring the points by their class (A or B).</li> </ul> </li> <li>Analyze the Plots:<ol> <li><p>Based on your 2D projection, describe the relationship between the two classes.</p> <ul> <li>Very intertwined, making it extremely difficult to separate them clearly. They do tend to different sides of the plot (in the x-axis), but they do have noticeable overlap.</li> </ul> </li> <li><p>Discuss the linear separability of the data. Explain why this type of data structure poses a challenge for simple linear models and would likely require a multi-layer neural network with non-linear activation functions to be classified accurately.</p> <ul> <li>Creating a single line that segregates these two classes is not possible, given that they do have overlap. If you were to trace a line between them, it would end up inevitably classifying class A as class B and vice-versa.</li> </ul> </li> </ol> </li> </ol> <p> </p> In\u00a0[16]: Copied! <pre>import pandas as pd\n\ndf = pd.read_csv(\"../../../data/SpaceshipTitanic/train.csv\")\n\ndf.head()\n</pre> import pandas as pd  df = pd.read_csv(\"../../../data/SpaceshipTitanic/train.csv\")  df.head() Out[16]: PassengerId HomePlanet CryoSleep Cabin Destination Age VIP RoomService FoodCourt ShoppingMall Spa VRDeck Name Transported 0 0001_01 Europa False B/0/P TRAPPIST-1e 39.0 False 0.0 0.0 0.0 0.0 0.0 Maham Ofracculy False 1 0002_01 Earth False F/0/S TRAPPIST-1e 24.0 False 109.0 9.0 25.0 549.0 44.0 Juanna Vines True 2 0003_01 Europa False A/0/S TRAPPIST-1e 58.0 True 43.0 3576.0 0.0 6715.0 49.0 Altark Susent False 3 0003_02 Europa False A/0/S TRAPPIST-1e 33.0 False 0.0 1283.0 371.0 3329.0 193.0 Solam Susent False 4 0004_01 Earth False F/1/S TRAPPIST-1e 16.0 False 303.0 70.0 151.0 565.0 2.0 Willy Santantines True In\u00a0[17]: Copied! <pre>null_counts = df.isnull().sum()\n\nprint(\"Null values per column:\")\nprint(null_counts) \n</pre> null_counts = df.isnull().sum()  print(\"Null values per column:\") print(null_counts)  <pre>Null values per column:\nPassengerId       0\nHomePlanet      201\nCryoSleep       217\nCabin           199\nDestination     182\nAge             179\nVIP             203\nRoomService     181\nFoodCourt       183\nShoppingMall    208\nSpa             183\nVRDeck          188\nName            200\nTransported       0\ndtype: int64\n</pre> <p>For these missing values, we must treat numerical and categorical features separately.</p> <p>For numerical features, we use a Simple Imputer to fill null values. In this instance, I chose the Median value to be used as filler. After that, we use a Standard Scaler to put all values centered at 0.</p> <p>For categorical features, we use the most frequent class as a fill-in for missing values, and pass it to a OneHotEncoder afterwards so our categorical values become boolean features. In this case, this gave us 26 features compared to our initial 14</p> In\u00a0[34]: Copied! <pre>from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\n\nX = df.drop([\"PassengerId\", \"Name\"], axis=1)\n\nprint(\"Original Data Without PassengerId and Name\")\nprint(X.shape)\n\nX[[\"Deck\", \"Num\", \"Side\"]] = X[\"Cabin\"].str.split(\"/\", expand=True)\nX.drop(\"Cabin\", axis=1, inplace=True)\n\nprint(\"\\nAfter splitting Cabin into Deck, Number and Side of ship (3 new columns)\")\nprint(X.shape)\n\nnum_features = [\"Age\", \"RoomService\", \"FoodCourt\", \"ShoppingMall\", \"Spa\", \"VRDeck\"]\ncat_features = [\"HomePlanet\", \"CryoSleep\", \"Destination\", \"VIP\", \"Deck\", \"Side\"]\n\nnum_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    (\"scaler\", StandardScaler())\n])\n\ncat_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\n])\n\npreprocessor = ColumnTransformer([\n    (\"num\", num_pipeline, num_features),\n    (\"cat\", cat_pipeline, cat_features)\n])\n\nX_processed = preprocessor.fit_transform(X)\n\nprint(\"\\nAfter Pipelines\")\nprint(X_processed.shape)\n</pre> from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.impute import SimpleImputer from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline import pandas as pd   X = df.drop([\"PassengerId\", \"Name\"], axis=1)  print(\"Original Data Without PassengerId and Name\") print(X.shape)  X[[\"Deck\", \"Num\", \"Side\"]] = X[\"Cabin\"].str.split(\"/\", expand=True) X.drop(\"Cabin\", axis=1, inplace=True)  print(\"\\nAfter splitting Cabin into Deck, Number and Side of ship (3 new columns)\") print(X.shape)  num_features = [\"Age\", \"RoomService\", \"FoodCourt\", \"ShoppingMall\", \"Spa\", \"VRDeck\"] cat_features = [\"HomePlanet\", \"CryoSleep\", \"Destination\", \"VIP\", \"Deck\", \"Side\"]  num_pipeline = Pipeline([     (\"imputer\", SimpleImputer(strategy=\"median\")),     (\"scaler\", StandardScaler()) ])  cat_pipeline = Pipeline([     (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),     (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\")) ])  preprocessor = ColumnTransformer([     (\"num\", num_pipeline, num_features),     (\"cat\", cat_pipeline, cat_features) ])  X_processed = preprocessor.fit_transform(X)  print(\"\\nAfter Pipelines\") print(X_processed.shape) <pre>Original Data Without PassengerId and Name\n(8693, 12)\n\nAfter splitting Cabin into Deck, Number and Side of ship (3 new columns)\n(8693, 14)\n\nAfter Pipelines\n(8693, 26)\n</pre> <ol> <li>Preprocess the Data: Your goal is to clean and transform the data so it can be fed into a neural network. The <code>tanh</code> activation function produces outputs in the range <code>[-1, 1]</code>, so your input data should be scaled appropriately for stable training.<ul> <li>Handle Missing Data: Devise and implement a strategy to handle the missing values in all the affected columns. Justify your choices.</li> <li>Encode Categorical Features: Convert categorical columns like <code>HomePlanet</code>, <code>CryoSleep</code>, and <code>Destination</code> into a numerical format. One-hot encoding is a good choice.</li> <li>Normalize/Standardize Numerical Features: Scale the numerical columns (e.g., <code>Age</code>, <code>RoomService</code>, etc.). Since the <code>tanh</code> activation function is centered at zero and outputs values in <code>[-1, 1]</code>, Standardization (to mean 0, std 1) or Normalization to a <code>[-1, 1]</code> range are excellent choices. Implement one and explain why it is a good practice for training neural networks with this activation function.</li> </ul> </li> <li>Visualize the Results:<ul> <li>Create histograms for one or two numerical features (like <code>FoodCourt</code> or <code>Age</code>) before and after scaling to show the effect of your transformation.</li> </ul> </li> </ol> In\u00a0[35]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\nfig, axes = plt.subplots(len(num_features), 2, figsize=(25, 4*len(num_features)))\n\nfor i in range(len(num_features)):\n    \n    feature = num_features[i]\n    \n    df[feature].hist(ax=axes[i, 0], bins=30, color=\"skyblue\")\n    axes[i, 0].set_title(f\"{feature} before scaling\")\n\n    scaled = StandardScaler().fit_transform(df[[feature]].fillna(df[feature].median()))\n    pd.Series(scaled.ravel()).hist(ax=axes[i, 1], bins=30, color=\"salmon\")\n    axes[i, 1].set_title(f\"{feature} after standardization\")\n\nplt.tight_layout()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt import pandas as pd from sklearn.preprocessing import StandardScaler  fig, axes = plt.subplots(len(num_features), 2, figsize=(25, 4*len(num_features)))  for i in range(len(num_features)):          feature = num_features[i]          df[feature].hist(ax=axes[i, 0], bins=30, color=\"skyblue\")     axes[i, 0].set_title(f\"{feature} before scaling\")      scaled = StandardScaler().fit_transform(df[[feature]].fillna(df[feature].median()))     pd.Series(scaled.ravel()).hist(ax=axes[i, 1], bins=30, color=\"salmon\")     axes[i, 1].set_title(f\"{feature} after standardization\")  plt.tight_layout() plt.show()  <p>Notice that the shape of the graphs is maintained, but the values in the x-axis are centered to 0.</p>"},{"location":"notebook1/ex1_data/#exercise-1","title":"Exercise 1\u00b6","text":""},{"location":"notebook1/ex1_data/#exploring-class-separability-in-2d","title":"Exploring Class Separability in 2D\u00b6","text":"<p>Understanding how data is distributed is the first step before designing a network architecture. In this exercise, you will generate and visualize a two-dimensional dataset to explore how data distribution affects the complexity of the decision boundaries a neural network would need to learn.</p>"},{"location":"notebook1/ex1_data/#instructions","title":"Instructions\u00b6","text":"<ol> <li>Generate the Data: Create a synthetic dataset with a total of 400 samples, divided equally among 4 classes (100 samples each). Use a Gaussian distribution to generate the points for each class based on the following parameters:<ul> <li>Class 0: Mean = [2, 3], Standard Deviation = [0.8, 2.5]</li> <li>Class 1: Mean = [5, 6], Standard Deviation = [1.2, 1.9]</li> <li>Class 2: Mean = [8, 1], Standard Deviation = [0.9, 0.9]</li> <li>Class 3: Mean = [15, 4], Standard Deviation = [0.5, 2.0]</li> </ul> </li> </ol>"},{"location":"notebook1/ex1_data/#exercise-2","title":"Exercise 2\u00b6","text":""},{"location":"notebook1/ex1_data/#non-linearity-in-higher-dimensions","title":"Non-Linearity in Higher Dimensions\u00b6","text":"<p>Simple neural networks (like a Perceptron) can only learn linear boundaries. Deep networks excel when data is not linearly separable. This exercise challenges you to create and visualize such a dataset.</p>"},{"location":"notebook1/ex1_data/#instructions","title":"Instructions\u00b6","text":"<ol> <li><p>Generate the Data: Create a dataset with 500 samples for Class A and 500 samples for Class B. Use a multivariate normal distribution with the following parameters:</p> <ul> <li><p>Class A:</p> <p>Mean vector:</p> <p>$$\\mu_A = [0, 0, 0, 0, 0]$$</p> <p>Covariance matrix:</p> <p>$$   \\Sigma_A = \\begin{pmatrix}   1.0 &amp; 0.8 &amp; 0.1 &amp; 0.0 &amp; 0.0 \\\\   0.8 &amp; 1.0 &amp; 0.3 &amp; 0.0 &amp; 0.0 \\\\   0.1 &amp; 0.3 &amp; 1.0 &amp; 0.5 &amp; 0.0 \\\\   0.0 &amp; 0.0 &amp; 0.5 &amp; 1.0 &amp; 0.2 \\\\   0.0 &amp; 0.0 &amp; 0.0 &amp; 0.2 &amp; 1.0   \\end{pmatrix}   $$</p> </li> <li><p>Class B:</p> <p>Mean vector:</p> <p>$$\\mu_B = [1.5, 1.5, 1.5, 1.5, 1.5]$$</p> <p>Covariance matrix:</p> <p>$$   \\Sigma_B = \\begin{pmatrix}   1.5 &amp; -0.7 &amp; 0.2 &amp; 0.0 &amp; 0.0 \\\\   -0.7 &amp; 1.5 &amp; 0.4 &amp; 0.0 &amp; 0.0 \\\\   0.2 &amp; 0.4 &amp; 1.5 &amp; 0.6 &amp; 0.0 \\\\   0.0 &amp; 0.0 &amp; 0.6 &amp; 1.5 &amp; 0.3 \\\\   0.0 &amp; 0.0 &amp; 0.0 &amp; 0.3 &amp; 1.5   \\end{pmatrix}   $$</p> </li> </ul> </li> </ol>"},{"location":"notebook1/ex1_data/#exercise-3","title":"Exercise 3\u00b6","text":""},{"location":"notebook1/ex1_data/#preparing-real-world-data-for-a-neural-network","title":"Preparing Real-World Data for a Neural Network\u00b6","text":"<p>This exercise uses a real dataset from Kaggle. Your task is to perform the necessary preprocessing to make it suitable for a neural network that uses the hyperbolic tangent (<code>tanh</code>) activation function in its hidden layers.</p>"},{"location":"notebook1/ex1_data/#instructions","title":"Instructions\u00b6","text":"<ol> <li><p>Get the Data: Download the Spaceship Titanic dataset from Kaggle.</p> </li> <li><p>Describe the Data:</p> <ul> <li><p>Briefly describe the dataset's objective (i.e., what does the <code>Transported</code> column represent?).</p> <ul> <li>We're trying to predict if a passenger was transported to another dimension during the crash of the Spaceship Titanic, the value that represents whether or not the passenger was transported is in the <code>Transported column</code></li> </ul> </li> <li><p>List the features and identify which are numerical (e.g., <code>Age</code>, <code>RoomService</code>) and which are categorical (e.g., <code>HomePlanet</code>, <code>Destination</code>).</p> </li> <li><p>Investigate the dataset for missing values. Which columns have them, and how many?</p> </li> </ul> </li> </ol> <p>Categorical Columns -</p> <ul> <li>HomePlanet - The planet the passenger departed from, typically their planet of permanent residence.</li> <li>Cabin - The cabin number where the passenger is staying. Takes the form deck/num/side, where side can be either P for Port or S for Starboard.</li> <li>Destination - The planet the passenger will be debarking to.</li> <li>Name - The first and last names of the passenger.</li> <li>PassengerId - A unique Id for each passenger. Each Id takes the form gggg_pp where gggg indicates a group the passenger is travelling with and pp is their number within the group. People in a group are often family members, but not always.</li> </ul> <p>Boolean Columns -</p> <ul> <li>Transported - Whether the passenger was transported to another dimension. This is the target, the column you are trying to predict.</li> <li>VIP - Whether the passenger has paid for special VIP service during the voyage.</li> <li>CryoSleep - Indicates whether the passenger elected to be put into suspended animation for the duration of the voyage. Passengers in cryosleep are confined to their cabins.</li> </ul> <p>Numerical Columns -</p> <ul> <li>Age - The age of the passenger.</li> <li>RoomService, FoodCourt, ShoppingMall, Spa, VRDeck - Amount the passenger has billed at each of the Spaceship Titanic's many luxury amenities.</li> </ul>"},{"location":"orderapi/main/","title":"Order API","text":""},{"location":"orderapi/main/#order-api","title":"Order API","text":"<p>A Order API implementa o gerenciamento de pedidos, seguindo uma arquitetura de microsservi\u00e7os com interface (<code>order</code>) e service (<code>order-service</code>) protegidos por autentica\u00e7\u00e3o JWT atrav\u00e9s do gateway.</p>"},{"location":"orderapi/main/#visao-geral","title":"Vis\u00e3o Geral","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt; product\n        gateway e6@==&gt; order:::red\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre>"},{"location":"orderapi/main/#endpoints","title":"Endpoints","text":"<p>POST /order</p> <p>Cria um novo pedido para o usu\u00e1rio autenticado.</p> RequestResponsePostman <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 10\n        }\n    ]\n}\n</code></pre> <p></p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), se o produto n\u00e3o existir\n</code></pre><p></p> <p></p> <p>GET /order</p> <p>Lista todos os pedidos do usu\u00e1rio autenticado.</p> Response <p></p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p>GET /order/{id}</p> <p>Busca os detalhes de um pedido espec\u00edfico. O pedido deve pertencer ao usu\u00e1rio autenticado.</p> Response <p></p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), se o pedido n\u00e3o pertencer ao usu\u00e1rio\n</code></pre><p></p>"},{"location":"orderapi/main/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"orderapi/main/#order-interface","title":"Order (Interface)","text":"<p>M\u00f3dulo que define o contrato da API atrav\u00e9s de Feign Client.</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderItemIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderOut.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 OrderItemOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> C\u00f3digo Fonte OrderController.javaOrderIn.javaOrderItemIn.javaOrderOut.javaOrderItemOut.java <pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@FeignClient(name = \"order\", url = \"http://order:8080\")\npublic interface OrderController {\n\n    @PostMapping(\"/order\")\n    ResponseEntity&lt;OrderOut&gt; create(@RequestBody OrderIn in);\n\n    @GetMapping(\"/order\")\n    ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll();\n\n    @GetMapping(\"/order/{id}\")\n    ResponseEntity&lt;OrderOut&gt; findById(@PathVariable(\"id\") String id);\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\nimport lombok.Builder;\n\n@Builder\npublic record OrderIn(List&lt;OrderItemIn&gt; items) {\n}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\n\n@Builder\npublic record OrderItemIn(String idProduct, Integer quantity) {}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\nimport java.util.List;\n\n@Builder\npublic record OrderOut(\n    String id,\n    String date,\n    List&lt;OrderItemOut&gt; items,\n    Double total) {\n}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\nimport store.product.ProductOut;\n\n@Builder\npublic record OrderItemOut(\n    String id,\n    ProductOut product,\n    Integer quantity,\n    Double total\n){\n\n}\n</code></pre> mvn clean install"},{"location":"orderapi/main/#order-service-implementacao","title":"Order-Service (Implementa\u00e7\u00e3o)","text":"<p>Servi\u00e7o que implementa a l\u00f3gica de neg\u00f3cio e persist\u00eancia dos pedidos.</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Order.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderItem.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 OrderService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.01.01.001__create_schema.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.01.01.002__create_table_order.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> C\u00f3digo Fonte Order.javaOrderItem.javaOrderModel.javaOrderParser.javaOrderResource.javaOrderService.javaOrderRepository.javaapplication.yaml <pre><code>package store.order;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data\n@Accessors(fluent = true, chain = true)\npublic class Order {\n\n    private String id;\n    private String accountId;\n    private LocalDateTime date;\n    private List&lt;OrderItem&gt; items;\n    private Double total;\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder @Data @Accessors(fluent = true, chain = true)\npublic class OrderItem {\n\n    private String productId;\n    private Integer quantity;\n    private Double price;\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"orders\")\n@Setter @Accessors(chain = true, fluent = true)\n@NoArgsConstructor @AllArgsConstructor\npublic class OrderModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"id_account\")\n    private String accountId;\n\n    @Column(name = \"date\")\n    private String date;\n\n    @Column(name = \"items_json\", length = 4000)\n    private String itemsJson;\n\n    @Column(name = \"total\")\n    private Double total;\n\n    public OrderModel(Order o) {\n        this.id = o.id();\n        this.accountId = o.accountId();\n        this.date = o.date() != null ? o.date().toString() : null;\n        this.itemsJson = OrderParser.writeItemsJson(o.items());\n        this.total = o.total();\n    }\n\n    public Order to() {\n        return Order.builder()\n            .id(this.id)\n            .accountId(this.accountId)\n            .date(this.date != null ? java.time.LocalDateTime.parse(this.date) : null)\n            .items(OrderParser.parseItemsJson(this.itemsJson))\n            .total(this.total)\n            .build();\n    }\n}\n</code></pre> <pre><code>package store.order;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic final class OrderParser {\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private OrderParser() {}\n\n    public static List&lt;OrderItem&gt; parseItemsJson(String json) {\n        if (json == null || json.isBlank()) return new ArrayList&lt;&gt;();\n        try {\n            return MAPPER.readValue(json, new TypeReference&lt;List&lt;OrderItem&gt;&gt;() {});\n        } catch (JsonProcessingException e) {\n            return new ArrayList&lt;&gt;();\n        }\n    }\n\n    public static String writeItemsJson(List&lt;OrderItem&gt; items) {\n        if (items == null) return null;\n        try {\n            return MAPPER.writeValueAsString(items);\n        } catch (JsonProcessingException e) {\n            return null;\n        }\n    }\n}\n</code></pre> <pre><code>package store.order;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.net.URI;\n\n@RestController\n@RequestMapping(\"/order\")\n@Validated\npublic class OrderResource {\n\n    private final OrderService service;\n\n    public OrderResource(OrderService service) {\n        this.service = service;\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;Order&gt; create(@RequestBody Order in) {\n        var created = service.create(in, \"account-1\"); // sem autentica\u00e7\u00e3o real\n        return ResponseEntity.created(URI.create(\"/order/\" + created.id())).body(created);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;Order&gt; findById(@PathVariable(\"id\") String id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElse(ResponseEntity.notFound().build());\n    }\n}\n</code></pre> <pre><code>package store.order;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Service\n@Transactional\npublic class OrderService {\n\n    private final OrderRepository repository;\n\n    public OrderService(OrderRepository repository) {\n        this.repository = repository;\n    }\n\n    public Order create(Order in, String currentAccountId) {\n        var total = in.items() == null ? 0.0 :\n            in.items().stream()\n                .mapToDouble(i -&gt; i.price() * i.quantity())\n                .sum();\n\n        var order = Order.builder()\n            .id(UUID.randomUUID().toString())\n            .accountId(currentAccountId)\n            .date(LocalDateTime.now())\n            .items(in.items())\n            .total(total)\n            .build();\n\n        repository.save(new OrderModel(order));\n        return order;\n    }\n\n    public Optional&lt;Order&gt; findById(String id) {\n        return repository.findById(id).map(OrderModel::to);\n    }\n}\n</code></pre> <pre><code>package store.order;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface OrderRepository extends CrudRepository&lt;OrderModel, String&gt; {\n}\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: order\n\n  mvc:\n    problemdetails:\n      enabled: true\n\n  datasource:\n    url: ${DATABASE_URL}\n    username: ${DATABASE_USERNAME}\n    password: ${DATABASE_PASSWORD}\n    driver-class-name: org.postgresql.Driver\n\n  flyway:\n    baseline-on-migrate: true\n    schemas: orders\n\n  jpa:\n    properties:\n      hibernate:\n        default_schema: orders\n\nlogging:\n  level:\n    store: debug\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,info\n  endpoint:\n    health:\n      show-details: always\n</code></pre> mvn clean package spring-boot:run"},{"location":"orderapi/main/#repositorios","title":"Reposit\u00f3rios","text":"Componente Interface Implementa\u00e7\u00e3o Order order order-service Product product product-service Auth auth auth-service Gateway - gateway-service"},{"location":"productapi/main/","title":"Product API","text":""},{"location":"productapi/main/#product-api","title":"Product API","text":"<p>A Product API implementa o CRUD de produtos, seguindo uma arquitetura de microsservi\u00e7os com interface (<code>product</code>) e service (<code>product-service</code>)</p>"},{"location":"productapi/main/#visao-geral","title":"Vis\u00e3o Geral","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt; product:::red\n        gateway e6@==&gt; order\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"productapi/main/#endpoints","title":"Endpoints","text":"<p>POST /product</p> <p>Cria um novo produto.</p> RequestResponsePostman <pre><code>{\n    \"name\": \"Produto Teste\",\n    \"price\": 99.99,\n    \"unit\": \"UN\"\n}\n</code></pre> <p></p><pre><code>{\n    \"id\": \"a9281347-3a0e-4dbd-bb80-0953da0e9681\",\n    \"name\": \"Produto Teste\",\n    \"price\": 99.99,\n    \"unit\": \"UN\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre><p></p> <p></p> <p>GET /product</p> <p>Lista todos os produtos.</p> ResponsePostman <p></p><pre><code>[\n    {\n        \"id\": \"4e1d0606-a29f-4203-9162-e9e4a47de3e0\",\n        \"name\": \"Produto Teste\",\n        \"price\": 99.99,\n        \"unit\": \"UN\"\n    },\n    {\n        \"id\": \"a9281347-3a0e-4dbd-bb80-0953da0e9681\",\n        \"name\": \"Produto Teste\",\n        \"price\": 99.99,\n        \"unit\": \"UN\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p>GET /product/{id}</p> <p>Busca um produto espec\u00edfico pelo ID.</p> ResponsePostman <p></p><pre><code>{\n    \"id\": \"4e1d0606-a29f-4203-9162-e9e4a47de3e0\",\n    \"name\": \"Produto Teste\",\n    \"price\": 99.99,\n    \"unit\": \"UN\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p>DELETE /product/{id}</p> <p>Deleta um produto pelo ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre>"},{"location":"productapi/main/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"productapi/main/#product-interface","title":"Product (Interface)","text":"<p>M\u00f3dulo que define o contrato da API atrav\u00e9s de Feign Client.</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 ProductOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> C\u00f3digo Fonte ProductController.javaProductIn.javaProductOut.java <pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(name = \"product\", url = \"http://product:8080\")\npublic interface ProductController {\n\n    @PostMapping(\"/product\")\n    public ResponseEntity&lt;ProductOut&gt; create(\n        @RequestBody ProductIn in\n    );\n\n    @GetMapping(\"/product\")\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll();\n\n    @GetMapping(\"/product/{id}\")\n    public ResponseEntity&lt;ProductOut&gt; findById(\n        @PathVariable(\"id\") String id\n    );\n\n    @DeleteMapping(\"/product/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(\n        @PathVariable(\"id\") String id\n    );\n}\n</code></pre> <pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductIn(\n    String name,\n    Double price,\n    String unit\n) {}\n</code></pre> <pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductOut(\n    String id,\n    String name,\n    Double price,\n    String unit\n) {}\n</code></pre> mvn clean install"},{"location":"productapi/main/#product-service-implementacao","title":"Product-Service (Implementa\u00e7\u00e3o)","text":"<p>Servi\u00e7o que implementa a l\u00f3gica de neg\u00f3cio e persist\u00eancia dos produtos.</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Product.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 ProductService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.01.01.001__create_schema.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.01.01.002__create_table_product.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> C\u00f3digo Fonte Product.javaProductModel.javaProductParser.javaProductResource.javaProductService.javaProductRepository.javaapplication.yaml <pre><code>package store.product;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data\n@Accessors(fluent = true, chain = true)\n@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\npublic class Product {\n    String id;\n    String name;\n    Double price;\n    String unit;\n}\n</code></pre> <pre><code>package store.product;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Entity\n@Table(schema = \"product\", name = \"product\")\n@Getter @Setter\n@NoArgsConstructor @AllArgsConstructor\npublic class ProductModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"price\", columnDefinition = \"DECIMAL(10,2)\")\n    private Double price;\n\n    @Column(name = \"unit\")\n    private String unit;\n\n    public ProductModel(Product p) {\n        this.id = p.id();\n        this.name = p.name();\n        this.price = p.price();\n        this.unit = p.unit();\n    }\n\n    public Product to() {\n        return Product.builder()\n            .id(this.id)\n            .name(this.name)\n            .price(this.price)\n            .unit(this.unit)\n            .build();\n    }\n}\n</code></pre> <pre><code>package store.product;\n\npublic final class ProductParser {\n\n    public static Product toProduct(ProductModel m) {\n        if (m == null) return null;\n        return Product.builder()\n            .id(m.getId())\n            .name(m.getName())\n            .price(m.getPrice())\n            .unit(m.getUnit())\n            .build();\n    }\n\n    public static ProductModel toModel(Product p) {\n        if (p == null) return null;\n        var m = new ProductModel();\n        m.setId(p.id());\n        m.setName(p.name());\n        m.setPrice(p.price());\n        m.setUnit(p.unit());\n        return m;\n    }\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.net.URI;\nimport java.util.List;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/product\")\n@Validated\npublic class ProductResource {\n\n    private final ProductService service;\n\n    public ProductResource(ProductService service) {\n        this.service = service;\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;Product&gt; create(@RequestBody ProductIn in) {\n        var created = service.create(in);\n        return ResponseEntity.created(URI.create(\"/product/\" + created.id())).body(created);\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;Product&gt;&gt; findAll() {\n        return ResponseEntity.ok(service.findAll());\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;Product&gt; findById(@PathVariable(\"id\") String id) {\n        return service.findById(id).map(ResponseEntity::ok).orElseGet(() -&gt; ResponseEntity.notFound().build());\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable(\"id\") String id) {\n        service.delete(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\n@Transactional\npublic class ProductService {\n\n    private final ProductRepository repository;\n\n    public ProductService(ProductRepository repository) {\n        this.repository = repository;\n    }\n\n    public Product create(ProductIn in) {\n        var model = new ProductModel();\n        model.setName(in.name());\n        model.setPrice(in.price());\n        model.setUnit(in.unit());\n        var saved = repository.save(model);\n        return ProductParser.toProduct(saved);\n    }\n\n    public List&lt;Product&gt; findAll() {\n        var out = new ArrayList&lt;Product&gt;();\n        repository.findAll().forEach(m -&gt; out.add(ProductParser.toProduct(m)));\n        return out;\n    }\n\n    public Optional&lt;Product&gt; findById(String id) {\n        return repository.findById(id).map(ProductParser::toProduct);\n    }\n\n    public void delete(String id) {\n        repository.deleteById(id);\n    }\n}\n</code></pre> <pre><code>package store.product;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ProductRepository extends CrudRepository&lt;ProductModel, String&gt; {\n\n    ProductModel findByName(String name);\n\n}\n</code></pre> <pre><code>spring:\n  application:\n    name: product-service\n\n  cache:\n    type: none\n\n  data:\n    redis:\n      repositories:\n        enabled: false\n\n  datasource:\n    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/product_db}\n    username: ${DATABASE_USERNAME:store}\n    password: ${DATABASE_PASSWORD:store123}\n    driver-class-name: org.postgresql.Driver\n\n  jpa:\n    hibernate:\n      ddl-auto: none\n    show-sql: false\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        format_sql: true\n\n  flyway:\n    enabled: true\n    baseline-on-migrate: true\n    locations: classpath:db/migration\n\nserver:\n  port: 8080\n</code></pre> mvn clean package spring-boot:run"},{"location":"productapi/main/#repositorios","title":"Reposit\u00f3rios","text":"Componente Interface Implementa\u00e7\u00e3o Product product product-service Auth auth auth-service Gateway - gateway-service"},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer.</p>"},{"location":"thisdocumentation/main/","title":"This documentation","text":""},{"location":"thisdocumentation/main/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, certifique-se de que voc\u00ea possui os seguintes pr\u00e9-requisitos instalados em seu sistema:</p> <ul> <li>Git: Para clonar o reposit\u00f3rio.</li> </ul>"},{"location":"thisdocumentation/main/#instalando-o-python","title":"Instalando o Python","text":"LinuxmacOSWindows <p>Instale o Python 3.8 ou superior.</p> <pre><code>sudo apt install python3 python3-venv python3-pip\npython3 --version\n</code></pre> <p>Instale o Python 3.8 ou superior.</p> <pre><code>brew install python\npython3 --version\n</code></pre> <p>Instale o Python 3.13 ou superior. Baixe o instalador do site oficial do Python (https://www.python.org/downloads/) e execute-o. Certifique-se de marcar a op\u00e7\u00e3o \"Add Python to PATH\" durante a instala\u00e7\u00e3o.</p> <pre><code>python --version\n</code></pre>"},{"location":"thisdocumentation/main/#usage","title":"Usage","text":"<p>Para utilizar o c\u00f3digo deste reposit\u00f3rio, siga as instru\u00e7\u00f5es a seguir:</p> <p>Clone ou fork este reposit\u00f3rio:</p> <pre><code>git clone &lt;URL_DO_REPOSITORIO&gt;\n</code></pre> <p>Crie um ambiente virtual do Python:</p> Linux/macOSWindows <pre><code>python3 -m venv env\n</code></pre> <pre><code>python -m venv env\n</code></pre> <p>Ative o ambiente virtual (voc\u00ea deve fazer isso sempre que for executar algum script deste reposit\u00f3rio):</p> Linux/macOSWindows <pre><code>source ./env/bin/activate\n</code></pre> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>Instale as depend\u00eancias com:</p> Linux/macOSWindows <pre><code>python3 -m pip install -r requirements.txt --upgrade\n</code></pre> <pre><code>python -m pip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"thisdocumentation/main/#deployment","title":"Deployment","text":"<p>O material utiliza o mkdocs para gerar a documenta\u00e7\u00e3o. Para visualizar a documenta\u00e7\u00e3o, execute o comando:</p> <pre><code>mkdocs serve -o\n</code></pre> <p>Para subir ao GitHub Pages, execute o comando:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Esse reposit\u00f3rio possui um workflow do GitHub Actions que executa o comando <code>mkdocs gh-deploy</code> sempre que houver um push na branch <code>main</code>. Assim, n\u00e3o \u00e9 necess\u00e1rio executar esse comando manualmente. Toda vez que voc\u00ea fizer um push na branch <code>main</code>, a documenta\u00e7\u00e3o ser\u00e1 atualizada automaticamente no GitHub Pages.</p> <p>Aviso 1</p> <p>Para que o github actions funcione corretamente, \u00e9 necess\u00e1rio que o reposit\u00f3rio esteja configurado para que o bot <code>github-actions[bot]</code> tenha permiss\u00e3o de escrita. Voc\u00ea pode verificar isso nas configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Actions\" e depois em \"General\". Certifique-se de que a op\u00e7\u00e3o \"Workflow permissions\" esteja definida como \"Read and write permissions\".</p> <p></p> <p>Aviso 2</p> <p>Depois de publicar, caso n\u00e3o consiga acessar a p\u00e1gina, verifique se o github pages est\u00e1 configurado corretamente. V\u00e1 at\u00e9 as configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Pages\" e verifique se a branch <code>gh-pages</code> est\u00e1 selecionada como fonte. Se n\u00e3o estiver, selecione-a e salve as altera\u00e7\u00f5es.</p> <p></p> <p>Pay Attention</p> <p>No arquivo '<code>mkdocs.yml</code>, a se\u00e7\u00e3o <code>site_url</code> deve estar configurada corretamente para o seu reposit\u00f3rio. Por exemplo, se o seu reposit\u00f3rio estiver em <code>https://github.com/usuario/repositorio</code>, a se\u00e7\u00e3o <code>site_url</code> deve ser:</p> <pre><code>site_url: https://usuario.github.io/repositorio\n</code></pre> <p>Tamb\u00e9m, certifique-se de que a se\u00e7\u00e3o <code>repo_url</code> esteja configurada corretamente para o seu reposit\u00f3rio. Por exemplo:</p> <pre><code>repo_url: https://github.com/usuario/repositorio\n</code></pre>"}]}